export namespace createGpuKernels {
    export { correlogramsKern };
    export { correlogramsPCKern };
    export { dftKern };
    export { idftKern };
    export { fftKern };
    export { ifftKern };
    export { dft_windowedKern };
    export { idft_windowedKern };
    export { fft_windowedKern };
    export { ifft_windowedKern };
    export { listdft2DKern };
    export { listdft1DKern };
    export { listfft1DKern };
    export { listfft1D_windowedKern };
    export { listdft1D_windowedKern };
    export { listidft1D_windowedKern };
    export { listifft1D_windowedKern };
    export { bulkArrayMulKern };
    export { multiImgConv2DKern };
    export { ImgConv2DKern };
    export { transpose2DKern };
}
export const addGpuFunctions: (typeof xcor | typeof iFFTlist | typeof add | typeof cadd)[];
declare function correlogramsKern(arrays: any, len: any): number;
declare function correlogramsPCKern(arrays: any, len: any, means: any, estimators: any): number;
declare function dftKern(signal: any, len: any, scalar: any): number;
declare function idftKern(amplitudes: any, len: any, scalar: any): number;
declare function fftKern(signal: any, len: any, scalar: any, sampleRate: any): number;
declare function ifftKern(amplitudes: any, len: any, scalar: any, sampleRate: any): number;
declare function dft_windowedKern(signal: any, sampleRate: any, freqStart: any, freqEnd: any, scalar: any): number;
declare function idft_windowedKern(amplitudes: any, sampleRate: any, freqStart: any, freqEnd: any, scalar: any): number;
declare function fft_windowedKern(signal: any, sampleRate: any, freqStart: any, freqEnd: any, scalar: any): number;
declare function ifft_windowedKern(amplitudes: any, sampleRate: any, freqStart: any, freqEnd: any, scalar: any): number;
declare function listdft2DKern(signals: any, scalar: any): number;
declare function listdft1DKern(signals: any, len: any, scalar: any): number;
declare function listfft1DKern(signals: any, len: any, scalar: any, sps: any): number;
declare function listfft1D_windowedKern(signals: any, sampleRate: any, freqStart: any, freqEnd: any, scalar: any): number;
declare function listdft1D_windowedKern(signals: any, sampleRate: any, freqStart: any, freqEnd: any, scalar: any): number;
declare function listidft1D_windowedKern(ffts: any, sampleRate: any, freqStart: any, freqEnd: any, scalar: any): number;
declare function listifft1D_windowedKern(ffts: any, sampleRate: any, freqStart: any, freqEnd: any, scalar: any): number;
declare function bulkArrayMulKern(arrays: any, len: any, n: any, scalar: any): number;
declare function multiImgConv2DKern(img: any, width: any, height: any, kernels: any, kernelLengths: any, nKernels: any): void;
declare function ImgConv2DKern(img: any, width: any, height: any, kernel: any, kernelLength: any): void;
declare function transpose2DKern(mat2: any): any;
declare function xcor(arr1: any, arr1mean: any, arr1Est: any, arr2: any, arr2mean: any, arr2Est: any, len: any, delay: any): number;
declare function iFFTlist(signals: any, len: any, freq: any, n: any, sr: any): number[];
declare function add(a: any, b: any): any;
declare function cadd(a_real: any, a_imag: any, b_real: any, b_imag: any): any[];
export {};
