export function makeKrnl(gpu: any, f: any, opts?: {
    setDynamicOutput: boolean;
    setDynamicArguments: boolean;
    setPipeline: boolean;
    setImmutable: boolean;
    setGraphical: boolean;
}): any;
export function makeCanvasKrnl(gpu: any, f: any, opts: {
    output: number[];
    setDynamicArguments: boolean;
    setDynamicOutput: boolean;
    setPipeline: boolean;
    setImmutable: boolean;
    setGraphical: boolean;
} | undefined, divId: any): any;
export class gpuUtils {
    constructor(gpu?: any);
    gpu: any;
    kernels: any;
    PI: number;
    SQRT1_2: number;
    imgkernels: {
        edgeDetection: number[];
        boxBlur: number[];
        sobelLeft: number[];
        sobelRight: number[];
        sobelTop: number[];
        sobelBottom: number[];
        identity: number[];
        gaussian3x3: number[];
        guassian7x7: number[];
        emboss: number[];
        sharpen: number[];
    };
    addFunction(func?: () => void): void;
    addKernel(name: string | undefined, krnl: (() => void) | undefined, opts: any): boolean;
    addCanvasKernel(name: any, f: any, opts: any, divId: any): any;
    combineKernels(name: any, fs?: any[], ckrnl?: () => void): any;
    callKernel(name?: string, args?: any[]): any;
    callCanvasKernel(name?: string, args?: any[], outputDims?: any[]): any;
    hasKernel(name?: string): boolean;
    addFunctions(): void;
    correlograms: any;
    correlogramsPC: any;
    dft: any;
    idft: any;
    dft_windowed: any;
    idft_windowed: any;
    fft: any;
    ifft: any;
    fft_windowed: any;
    ifft_windowed: any;
    listdft2D: any;
    listdft1D: any;
    listdft1D_windowed: any;
    listfft1D: any;
    listfft1D_windowed: any;
    listidft1D_windowed: any;
    listifft1D_windowed: any;
    bulkArrayMul: any;
    gpuCoherence: ((signals: any, sampleRate: any, freqStart: any, freqEnd: any, scalar: any) => any) | undefined;
    gpuXCors(arrays: any, precompute?: boolean, texOut?: boolean): any;
    gpuDFT(signalBuffer: any, nSeconds: any, scalar?: number, texOut?: boolean): any;
    MultiChannelDFT(signalBuffer: any, nSeconds: any, scalar?: number, texOut?: boolean): any;
    MultiChannelDFT_Bandpass(signalBuffer: any[] | undefined, nSeconds: any, freqStart: any, freqEnd: any, scalar?: number, texOut?: boolean): any;
    gpuFFT(signalBuffer: any, nSeconds: any, scalar: number | undefined, sampleRate: any, texOut?: boolean): any;
    MultiChannelFFT(signalBuffer: any, nSeconds: any, scalar?: number, texOut?: boolean): any;
    MultiChannelFFT_Bandpass(signalBuffer: any[] | undefined, nSeconds: any, freqStart: any, freqEnd: any, scalar?: number, texOut?: boolean): any;
    orderMagnitudes(unorderedMags: any): any[];
    makeFrequencyDistribution(FFTlength: any, sampleRate: any): number[];
    orderBPMagnitudes(signalBufferProcessed: any, nSeconds: any, sampleRate: any, nSamplesPerChannel: any): any[];
    bandPassWindow(freqStart: any, freqEnd: any, nSteps: any, posOnly?: boolean): any[];
}
